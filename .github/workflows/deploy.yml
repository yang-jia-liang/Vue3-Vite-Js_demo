name: 部署项目到服务器

on:
  push:
    branches:
      - main  # 监听 main 分支的 push 事件

jobs:
  build-and-deploy:
    # 执行该作业的虚拟机环境
    # 常用 ubuntu-latest，环境体积小、启动快
    runs-on: ubuntu-latest

    steps:
      - name: 拉取代码
        uses: actions/checkout@v3

      - name: 安装 Node.js
        uses: volta-cli/action@v4
        with:
          node-version: '20.17.0' # 指定具体版本

      - name: 验证版本，必要时增加 npm 版本锁定
        run: |
            node -v
            npm -v

      - name: 缓存 npm 依赖 # 重复构建时加速
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: 安装依赖
        run: npm ci


      - name: 打包项目
        run: npm run build
        env:
          NODE_ENV: production

      - name: 检查打包结果
        run: |
            if [ ! -d "dist" ]; then
              echo "打包失败：dist 目录不存在"
              exit 1
            fi  

      - name: 推送到服务器
        uses: easingthemes/ssh-deploy@v2.1.5
        with:
          ssh_private_key: ${{ secrets.SSH_PRIVATE_KEY }}

          # -a：包含所有子目录和文件
          # -v：显示每个文件的传输进度和状态，在 GitHub Actions 日志中查看哪些文件被同步、跳过或删除
          # -z：传输前压缩文件，目标端自动解压
          # --delete：目标目录和打包目录完全一致，有多余的文件会删除掉
          args: "-avz --delete"
          source: "dist/"
          remote_host: ${{ secrets.REMOTE_HOST }}
          remote_user: ${{ secrets.REMOTE_USER }}
          remote_port: ${{ secrets.REMOTE_PORT || 22 }}  # 默认端口 22
          target: ${{ secrets.REMOTE_TARGET }}


      - name: 验证部署
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.REMOTE_PORT || 22 }}

          # 确认可进入部署目录
          # 查看文件列表和修改时间
          script: |
            cd ${{ secrets.REMOTE_TARGET }} 
            echo "部署成功：$(date)"
            ls -la
